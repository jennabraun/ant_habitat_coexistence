SES_dis$sites <- row.names(SES_dis)
#join site-level environmental measurements to data
cov$sites <- paste(cov$Site, cov$month)
SES <- select(cov, 1:15, shrub.site, sites, 37:43) %>% distinct() %>% left_join(SES_dis, by = "sites")
# Chunk 13
SES2 <- cbind(SES, sitescores)
SES2$PC1 <- as.numeric(SES2$PC1)
SES2$PC2 <- as.numeric(SES2$PC2)
SES2$PC3 <- as.numeric(SES2$PC3)
#need to add raw FDisp score
mean(SES$SES3)
t.test(SES$SES3)
m1 <- lm(SES3 ~ PC1 + PC2, data = SES2)
summary(m1)
shapiro.test(resid(m1))
ggplot(SES2, aes(PC1, SES3)) + geom_smooth(method = 'lm')
ggplot(SES2, aes(PC1, SES3, color = shrub.site)) + geom_smooth(method = 'lm')
m2 <- lm(SES3 ~ arid, data = SES2)
summary(m2)
ggplot(SES2, aes(arid, SES3)) + geom_smooth(method = 'lm')
ggplot(SES2, aes(Temp, SES3)) + geom_smooth(method = 'lm')
ggplot(SES2, aes(Max, SES3)) + geom_smooth()
ggplot(SES2, aes(NDVI, SES3)) + geom_smooth(method = 'lm')
ggplot(SES2, aes(mean.cover, SES3)) + geom_smooth(method = 'lm')
ggplot(SES2, aes(var.cover, SES3)) + geom_smooth()
#new heat map
mat3 <- select(SES2, esi, 4,5, 8, 12:15, 18, 24, 24:28)
M3 <- cor(mat3)
corrplot::corrplot(M3, method = "number")
# Chunk 14
#look at me I'm varpart
# Chunk 15
#let's do a null model for pitfall trap level, can randomize between sites?
#need a presence/absence matrix at the pitfall trap level, and want population-level means for this analysis, go from long.pres
long.pres$spepop <- paste(long.pres$species, long.pres$Site)
wide.pit.pop <- long.pres %>%
select(uniID, spepop, count.bin) %>%
pivot_wider(names_from = spepop, values_from = count.bin) %>%
as.data.frame()
wide.pit.pop[is.na(wide.pit.pop)] <- 0
row.names(wide.pit.pop) <- wide.pit.pop$uniID
wide.pit.pop <- select(wide.pit.pop, -uniID)
#remove zero rows and columns
wide.pit.pop <- wide.pit.pop[,colSums(wide.pit.pop) > 0]
wide.pit.pop <- select(wide.pit.pop, -36, -42)
wide.pit.pop <- wide.pit.pop[rowSums(wide.pit.pop) > 0,]
#check species name match up
spec <- colnames(wide.pit.pop)
all.equal(spec, row.names(trait.pop))
# numberReps <- 100
# #Lets create a matrix to store results from each iteration (one column per iteration)
# resultsRandom3 <- matrix(NA, nrow = nrow(wide.pit.pop), ncol = numberReps,
#                         dimnames = list(rownames(wide.pit.pop),
#                                         paste0("Sim.", 1:numberReps)))
# for(rep in 1:numberReps){
#   randomizedFDis <- randomizeMatrix(samp = wide.pit.pop, null.model = "independentswap")
#   simFDis <- dbFD(trait.pop, randomizedFDis, w.abun = TRUE)$FDis
#   resultsRandom3[, rep] <- simFDis
# }
#
# saveRDS(resultsRandom3, file = "Clean Data/objects/FDispRandom_pitfall.rds")
resultsRandom3 <- readRDS("Clean Data/objects/FDispRandom_pitfall.rds")
obsFDis <- dbFD(trait.pop, wide.pit.pop, w.abun = TRUE)$FDis
meanNull3 <- rowMeans(resultsRandom3)
ES3 <- obsFDis - meanNull3
sdNull3 <- apply(resultsRandom3, 1, sd)
SES3 <- ES3 / sdNull3
SES_dis_pit <- data.frame(SES3)
SES_dis_pit$uniID <- row.names(SES_dis_pit)
SES_dis_pit <- rename(SES_dis_pit, SES_disp_pit = SES3)
SES_dis_pit <- left_join(SES_dis_pit, cov, by = "uniID")
#join site-level environmental measurements to data
#SES_dis_pit <- cbind(SES_dis_pit, score2)
# Chunk 16
mean(SES_dis_pit$SES_disp_pit, na.rm = TRUE)
t.test(SES_dis_pit$SES_disp_pit)
ggplot(SES_dis_pit, aes(Microsite, SES_disp_pit)) + geom_boxplot()
ggplot(SES_dis_pit, aes(esi, SES_disp_pit, color = Microsite)) + geom_smooth(method = "lm")
ggplot(SES_dis_pit, aes(arid, SES_disp_pit, color = Microsite)) + geom_smooth(method = "lm")
ggplot(SES_dis_pit, aes(esi, SES_disp_pit, color = shrub.site)) + geom_smooth(method = "lm")
m1 <- glmmTMB(SES_disp_pit ~ Microsite + arid  + (1|Site), family = "gaussian", data = SES_dis_pit)
summary(m1)
shapiro.test(resid(m1))
plot(resid(m1))
# Chunk 17
# Chunk 18
#rows are species and the columns are sites
#join site-month codes to spebin
c_data <- dplyr::select(cov, uniID, sites) %>% right_join(spe.bin, by = 'uniID')
row.names(c_data) <- c_data$uniID
c_data <- split(c_data, c_data$sites)
# I think we only want to include species found somewhere within the site, so need to drop columns
#The matrix-wide C-score is not calculated for missing species, so empty rows in the matrix do not affect the result.
#but! the null model needs no empty rows or columns
c_data <- map(c_data, ~ .x %>%
select(-sites, -uniID) %>%
select(which(!colSums(.) %in% 0)) %>%
t())
#takes a while to run, save as object and read in
#
# c_null <- map(c_data, ~.x %>%
#                 cooc_null_model(., algo = "sim2", metric = "c_score", nReps = 999))
#
#
# saveRDS(c_null, file = "Clean Data/objects/c_score_null_pitfall.rds")
c_null <- readRDS("Clean Data/objects/c_score_null_pitfall.rds")
c_null <- data.frame(do.call(rbind, c_null))
c_obs <- c_null$Obs
c_obs <- as.data.frame(c_obs)
c_obs <- t(c_obs)
c_sims <- as.data.frame(c_null$Sim)
c_sims <- t(c_sims)
multiple.func <- function(x) {
c(mean = mean(x), sd = sd(x))
}
c_sim <- apply(c_sims, 1, multiple.func)
c_sim <- t(c_sim)
c_obs <- cbind(c_obs, c_sim)
c_obs <- as.data.frame(c_obs)
c_obs <- mutate(c_obs, SES_C = (V1 - mean) / sd)
mean(c_obs$SES_C, na.rm = TRUE)
t.test(c_obs$SES_C, na.rm = TRUE)
# I think we aren't getting enough random matrices to actually create a distribution :(
# some have sd of 0
c_obs$sites <- row.names(c_obs)
c_obs$sites <- gsub("\\.", " ", c_obs$sites)
SES <- right_join(c_obs, SES, by = "sites")
ggplot(SES, aes(SES3, SES_C)) + geom_smooth(method = "lm")
ggplot(SES, aes(arid, SES_C)) + geom_smooth(method = "lm")
cwm_wide <- CWM.pres %>% pivot_wider(names_from = Trait, values_from = cwm)
#drop non-standardized traits
cwm_wide <- select(cwm_wide, -45, -47, -49, -50, -53, -55)
#remove rows with zero abundance
cwm_wide <- filter(cwm_wide, abun > 0)
cwm_wide <- select(cwm_wide, 1, 2, 5:11, 14:17, 19, 25, 31, 35, 38:51)
# drop rows with NA values
cwm_wide <- drop_na(cwm_wide) %>% ungroup()
cwm_wide <- filter(cwm_wide, Webers > 0)
View(cwm_wide)
cwm_wide <- CWM.pres %>% pivot_wider(names_from = Trait, values_from = cwm)
#drop non-standardized traits
cwm_wide <- select(cwm_wide, -45, -47, -49, -50, -53, -55)
#remove rows with zero abundance
cwm_wide <- filter(cwm_wide, abun > 0)
View(cwm_wide)
cwm_wide <- CWM.pres %>% pivot_wider(names_from = Trait, values_from = cwm)
View(cwm_wide)
#drop non-standardized traits
cwm_wide <- select(cwm_wide, -46, -48, -49, -50, -51, -54, -56, -59)
#remove rows with zero abundance
cwm_wide <- filter(cwm_wide, abun > 0)
cwm_wide <- select(cwm_wide, 1, 2, 6,7 , 14:16, 19, 25, 31, 35, 38, 40, 44, 46:51)
# drop rows with NA values
cwm_wide <- drop_na(cwm_wide) %>% ungroup()
cwm_wide <- filter(cwm_wide, Webers > 0)
cwm_wide <- CWM.pres %>% pivot_wider(names_from = Trait, values_from = cwm)
#drop non-standardized traits
cwm_wide <- select(cwm_wide, -46, -48, -49, -50, -51, -54, -56, -59)
#remove rows with zero abundance
cwm_wide <- filter(cwm_wide, abun > 0)
cwm_wide <- select(cwm_wide, 1, 2, 6,7 , 14:16, 19, 25, 31, 35, 38, 40, 44, 46:51)
# drop rows with NA values
cwm_wide <- filter(cwm_wide, Webers > 0)
cwm_wide <- drop_na(cwm_wide)
View(cwm_wide)
cwm_traits <- cwm_wide  %>% ungroup %>% select(15:20)
cwm_env <- cwm_wide %>% ungroup() %>% select(1, 3:14)
View(cwm_env)
cwm_wide <- CWM.pres %>% pivot_wider(names_from = Trait, values_from = cwm)
#drop non-standardized traits
cwm_wide <- select(cwm_wide, -46, -48, -49, -50, -51, -54, -56, -59)
#remove rows with zero abundance
cwm_wide <- filter(cwm_wide, abun > 0)
cwm_wide <- select(cwm_wide, 1, 2, 6,7, 10, 14:16, 19, 25, 31, 35, 38, 40, 44, 46:51)
# drop rows with NA values
cwm_wide <- filter(cwm_wide, Webers > 0)
cwm_wide <- drop_na(cwm_wide)
cwm_traits <- cwm_wide  %>% ungroup %>% select(16:21)
cwm_env <- cwm_wide %>% ungroup() %>% select(1, 3:15)
m2 <- capscale(cwm_traits~  Prec+   Microsite +  NDVI   + Temp  + var.cover + Condition(Site.x), data = cwm_env, dist = "bray", metaMDSdist = TRUE)
m3 <- ordistep(m2, direction = "both")
summary(m2)
anova.cca(m2, by = "margin", model = "reduced", strata = cwm_env$Site.x)
a3 <- anova.cca(m2, by = "margin", model = "reduced", strata = cwm_env$Site.x)
summary(a3)
vif.cca(m3)
plot(m3)
site_cwm <- dbFD(trait.pop, wide.pop, w.abun = TRUE)$CWM
View(site_cwm)
View(envreduce)
View(site_cwm)
env2 <- select(cov, 3:5, 8, 12:15, 37:43, sites) %>% drop_na() %>% distinct()
View(env2)
env2[order(match(env2[,16], row.names(site_cwm))),]
env2 <- env2[order(match(env2[,16], row.names(site_cwm)))]
env2 <- env2[order(match(env2[,16], row.names(site_cwm))),]
View(env2)
m2 <- capscale(site_cwm~  mean.cover + var.cover +mean.height+ Temp+ Prec+ Max + NDVI +SBIO1_05 + SBIO7__515, data = env2, dist = "bray", metaMDSdist = TRUE)
m3 <- ordistep(m2, direction = "both")
summary(m3)
a3 <- anova.cca(m2, by = "margin", model = "reduced")
anova.cca(m3, by = "margin", model = "reduced")
m3 <- ordistep(m2, direction = "both")
anova.cca(m3, by = "margin", model = "reduced")
vif.cca(m3)
View(SES2)
View(SES2)
CWM <- site_cwm
cwm <- site_cwm
cwm$sites <- row.names(cwm)
View(cwm)
cwm <- select(SES2, sites, PC1, PC2, PC3) %>% left_join(cwm, by = 'sites')
View(cwm)
cor.test(cwm$Webers, cwm$PC1)
fit1 <- lm(Webers ~ PC1, cwm)
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 4, y = 3.5),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("Mean RDM Biomass (g)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("Mean RDM Biomass (g)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = -1, y = 1),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("Mean RDM Biomass (g)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = -1.5, y = 1),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("Mean RDM Biomass (g)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = -1, y = 1.5),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("Mean RDM Biomass (g)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red")
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 1.3),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("Mean RDM Biomass (g)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
a <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 1.3),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Weber's Body Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
a
fit1 <- lm(Femur.w ~ PC1, cwm)
b <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 0.03, y = 3.5),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Femer Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
b
b <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 1.4),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Femer Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
b
b <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 1.1),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Femer Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
b
fit1 <- lm(Headl.w ~ PC1, cwm)
c <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 4, y = 60),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Head Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
c
c <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 1.4),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Head Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
c
c <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.8),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Head Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
c
fit1 <- lm(Eyel.w ~ PC1, cwm)
d <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 0.5, y = 0.5),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Eye Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
d
d <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 0.2, y = 0.5),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Eye Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
d
d <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.2),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Eye Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
d
fit1 <- lm(Headw.w ~ PC1, cwm)
fit1 <- lm(Headw.w ~ PC1, cwm)
e <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 1),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Head Width (mm)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + ylab("Mean RII RDM Biomass")+ theme(text = element_text(size = 18))
e
e <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.8),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Head Width (mm)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + ylab("Mean RII RDM Biomass")+ theme(text = element_text(size = 18))
e
e <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.8),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + ylab("CWM Head Width (mm)")+ theme(text = element_text(size = 18))
e
fit1 <- lm(Scape.w ~ PC1, cwm)
f <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 0.03, y = 0.78),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Scape Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
f
f <-  ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.8),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Scape Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 18))
f
fit1 <- lm(Mandible.w ~ PC1, cwm)
fit1 <- lm(Mandible.w ~ PC1, cwm)
g <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.75),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Mandible Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
g
g <- ggplot(fit1$model, aes_string(x = names(fit1$model)[2], y = names(fit1$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_label(aes(x = 1, y = 0.5),vjust=1, hjust = 0,
label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 5),
" \nP =",signif(summary(fit1)$coef[2,4], 5))) + ylab("CWM Mandible Length (mm)") + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 18))
g
plots <- list(a,b,c,d,e,f,g)
grobs <- list()
widths <- list()
for (i in 1:length(plots)){
grobs[[i]] <- ggplotGrob(plots[[i]])
widths[[i]] <- grobs[[i]]$widths[2:5]
}
maxwidth <- do.call(grid::unit.pmax, widths)
for (i in 1:length(grobs)){
grobs[[i]]$widths[2:5] <- as.list(maxwidth)
}
p <- do.call("grid.arrange", c(grobs, ncol = 2))
p <- do.call("grid.arrange", c(grobs, ncol = 2))
library(gridExtra)
p <- do.call("grid.arrange", c(grobs, ncol = 2))
p
data(mite.xy)
View(mite.xy)
install.packages("adespatial")
library(adespatial)
data("bacProdxy")
View(bacProdxy)
install.packages("SoDA")
library(SoDA)
?geoXY
View(SES2)
sites.xy <- geoXY(SES2$Lat.x, SES2$Long.x)
mem <- dbmem(sites.xy)
View(mem)
var_df <- cbind(SES2, sites.xy)
View(var_df)
disp <- SES2$SES3
env <- select(SES2, 4, 5, 8, 12:14, 18, 19, 24)
v1 <- varpart(disp ~ env + sites.xy)
v1 <- varpart(disp, ~ env ~ sites.xy)
v1 <- varpart(Y =disp, X = ~ env, ~ sites.xy)
View(env)
v1 <- varpart(Y =disp, X = env, sites.xy)
summary(v1)
v1
plot.varpart(v1)
?plot.varpart
plot(.varpart(v1)
plot(varpart(v1)
plot(v1)
showvarparts(v1)
rda(v1)
browseVignettes("vegan")
library(dplyr)
library(tidyr)
library(ggplot2)
library(performance)
library(glmmTMB)
library(vegan)
library(ggvegan)
library(FD)
library(picante)
library(purrr)
library(gridExtra)
View(wide)
View(long.pres)
alpha <- select(cov, uniID, month) %>% right_join(long.pres, by = "uniID")
View(alpha)
alpha$sites <- paste(alpha$Site, alpha$month)
alpha <- filter(alpha, species != "Solenopsisaurea" & species != "Solenopsismolesta")
alpha <- alpha %>% group_by(sites) %>% summarise(richness = sum(count.bin))
View(alpha)
alpha <- select(cov, uniID, month) %>% right_join(long.pres, by = "uniID")
alpha$sites <- paste(alpha$Site, alpha$month)
alpha <- filter(alpha, species != "Solenopsisaurea" & species != "Solenopsismolesta")
alpha <- select(alpha, sites, species, count.bin)
alpha <- distinct(alpha)
alpha <- alpha %>% group_by(sites) %>% summarise(richness = sum(count.bin))
View(SES2)
alpha <- right_join(alpha, SES2, by = "sites")
m1 <- glm(richness ~ PC1 + PC2 + PC3, family = "poisson", data = SES2)
summary(m1)
m1 <- glm(richness ~ PC1 + PC2 + PC3, family = "poisson", data = alpha)
summary(m1)
m1 <- glm(richness ~ PC1 + PC2 + PC3, family = "Gaussian", data = alpha)
m1 <- glm(richness ~ PC1 + PC2 + PC3, family = "gaussian", data = alpha)
summary(m1)
shapiro.test(resid(m1))
m1 <- glm(richness ~ PC1 + PC2 + PC3, family = "poisson", data = alpha)
summary(m1)
m1 <- glm(richness ~ PC1 , family = "poisson", data = alpha)
summary(m1)
m1 <- glmmTMB(richness ~ PC1 + PC2 + PC3 + 1|Site, family = "poisson", data = alpha)
summary(m1)
m1 <- glmmTMB(richness ~ PC1 + PC2 + PC3 + (1|Site), family = "poisson", data = alpha)
summary(m1)
m2 <- glm(richness ~ arid,family = "poisson", data = alpha)
summary(m2)
m2 <- glm(richness ~ Prec, family = "poisson", data = alpha)
summary(m2)
m2 <- glm(richness ~ Prec + Temp, family = "poisson", data = alpha)
summary(m2)
m2 <- glm(richness ~ Prec * Temp, family = "poisson", data = alpha)
summary(m2)
m2 <- glm(richness ~ Prec, family = "poisson", data = alpha)
summary(m2)
