occs.cellDups <- duplicated(occs.cells[,1])
occs <- fire_sf
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(envs), type = "ellps")
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#crop to north america
e <- as(extent(-171, 14, -86, 71), 'SpatialPolygons')
plot(e, add = TRUE)
?extent
#crop to north america
e <- as(extent(-171, 14, -5, 71), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-171, 14, 32, 71), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-171, 14, 15, 71), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-171, 14, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 14, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 5, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#crop to north america
e <- as(extent(-50, 5, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 15, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 15, 50, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, -15, 50, 50), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, -15, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 20, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 20, 15, 20), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-15, -15, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 15, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#crop to north america
e <- as(extent(-50, 15, 15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 15, -15, 50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(-50, 15, 15, -50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(50, 15, 15, -50), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#crop to north america
e <- as(extent(50, 15, 15, -50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(50, -15, 15, -50), 'SpatialPolygons')
plot(e, add = TRUE)
#crop to north america
e <- as(extent(50, -50, 15, -50), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#crop to north america
e <- as(extent(50, -50, 15, -50), 'SpatialPolygons')
#crop to north america
e <- as(extent(-171, 18, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
axis(side=1, at=seq(0,700,100)/768, labels=seq(0,700,100))
axis(side=2, at=seq(0,500,100)/512, labels=seq(0,500,100), las=1)
#crop to north america
e <- as(extent(-50, 18, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
plot(e, add = TRUE)
#left side,
e <- as(extent(-120, 18, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
#left side,
e <- as(extent(-140, 18, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#left side,
e <- as(extent(-140, 18, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
#left side,
e <- as(extent(-140, 50, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#left side,
e <- as(extent(-140, -50, -66, 71), 'SpatialPolygons')
plot(e, add = TRUE)
#left side, right side
e <- as(extent(-140, -70, -10, 71), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#left side, right side
e <- as(extent(-140, -70, -10, 71), 'SpatialPolygons')
plot(e, add = TRUE)
#left side, right side, bottoms, top
e <- as(extent(-140, -70, 10, 50), 'SpatialPolygons')
plot(e, add = TRUE)
plot(envs[[1]], main="Mean annual temperature")
plot(occs, add = TRUE)
#left side, right side, bottoms, top
e <- as(extent(-140, -70, 10, 50), 'SpatialPolygons')
plot(e, add = TRUE)
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
envs <- crop(envs, e)
plot(envs[[1]])
occs.sim <- similarity(envs, occs)
occs.mess <- occs.sim$similarity_min
#use MESS to determine climatic similarity of points
occs.z <- raster::extract(envs, occs)
occs.sim <- similarity(envs, occs.z)
occs.mess <- occs.sim$similarity_min
occs.sp <- sp::SpatialPoints(occs)
install.packages("rasterVis")
library(rasterVis)
occs.sp <- sp::SpatialPoints(occs)
library(sp)
occs.sp <- sp::SpatialPoints(occs)
rasterVis::levelplot(occs.mess, main = "Environmental similarity", margin = FALSE) +
latticeExtra::layer(sp.points(occs, col="black"))
rasterVis::levelplot(occs.mess, main = "Environmental similarity", margin = FALSE) +
latticeExtra::layer(occs, col="black")
rasterVis::levelplot(occs.mess, main = "Environmental similarity", margin = FALSE) +
latticeExtra::layer(occs)
plot(occs, add = TRUE)
occs.buf <- sf::st_buffer(occs, dist = 7) %>% sf::st_union() %>% sf::st_sf()
plot(envs[[1]], main = names(envs)[1])
points(occs)
# To add sf objects to a plot, use add = TRUE
plot(occs, add = TRUE)
plot(occs.buf, border = "blue", lwd = 3, add = TRUE)
crs
occs.buf <- sf::st_buffer(occs, dist = 1000) %>% sf::st_union() %>% sf::st_sf()
plot(envs[[1]], main = names(envs)[1])
points(occs)
# To add sf objects to a plot, use add = TRUE
plot(occs, add = TRUE)
plot(occs.buf, border = "blue", lwd = 3, add = TRUE)
hull <- st_convex_hull(st_union(occs))
plot(hull, border = "blue", lwd = 3, add = TRUE)
hull.buf <- sf::st_buffer(jull, dist = 10000)
hull.buf <- sf::st_buffer(hull, dist = 10000)
plot(envs[[1]], main = names(envs)[1])
plot(occs, add = TRUE)
plot(hull.buf, border = "blue", lwd = 3, add = TRUE)
envs.bg <- raster::crop(envs, hull.buf)
hull.buf <- st_sf(hull.buf)
envs.bg <- raster::crop(envs, hull.buf)
bg <- dismo::randomPoints(envs[[1]], n = 10000) %>% as.data.frame()
colnames(bg) <- colnames(occs)
plot(envs.bg[[1]])
plot(bg, pch = 20, cex = 0.2, add = TRUE)
e.mx.l <- ENMevaluate(occs = occs, envs = envs, bg = bg,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = "L", rm = 1:2))
colnames(bg) <- colnames(occs)
View(bg)
View(occs)
occo <- st_coordinates(occs)
occo <- as.data.frame(st_coordinates(occs))
e.mx.l <- ENMevaluate(occs = occo, envs = envs, bg = bg,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = "L", rm = 1:2))
e.mx.l <- ENMevaluate(occo, envs = envs, bg = bg,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = "L", rm = 1:2))
View(occo)
View(bg)
colnames(bg) <- colnames(occo)
e.mx.l <- ENMevaluate(occo, envs = envs, bg = bg,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = "L", rm = 1:2))
e.mx.l
e.mx <- ENMevaluate(occo, envs = envs, bg = bg,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L","LQ","LQH","H"), rm = 1:5))
overlap <- calc.niche.overlap(e.mx@predictions, overlapStat = "D")
overlap
e.mx
str(e.mx, max.level=2)
eval.results(e.mx) %>% head()
evalplot.stats(e = e.mx, stats = "or.mtp", color = "fc", x.var = "rm")
res <- eval.results(e.mx)
opt.aicc <- res %>% filter(delta.AICc == 0)
opt.aicc
opt.seq <- res %>%
filter(or.10p.avg == min(or.10p.avg)) %>%
filter(auc.val.avg == max(auc.val.avg))
opt.seq
mod.seq <- eval.models(e.mx)[[opt.seq$tune.args]]
mod.seq$betas
plot(mod.seq, type = "cloglog")
plot(mod.seq, type = "cloglog")
opt.aicc
mod.seq
opt.seq
pred.seq <- eval.predictions(e.mx)[[opt.seq$tune.args]]
plot(pred.seq)
opt.aicc
pred.seq <- eval.predictions(e.mx)[[opt.aicc$tune.args]]
plot(pred.seq)
plot(pred.seq)
#read in GABI ants data
ants <- read.csv("raw data/GABI_Data_Release1.0_18012020.csv")
phei <- filter(ants, valid_species_name == "Pheidole.hyatti")
View(phei)
phei <- filter(phei, dubious != "Dubious")
# #I'm removing the Bahamas population
# fire <- filter(fire, country != "Bahamas")
unique(phei$country)
phei <- filter(phei, dec_lat != "")
phei_sf <- st_as_sf(phei, coords = c("dec_long", "dec_lat"), crs= st_crs(envs))
plot(phei)
plot(phei)
plot(phei_sf)
poccs.cells <- raster::extract(envs[[1]], phei_sf, cellnumbers = TRUE)
poccs.cells <- raster::extract(envs[[1]], phei_sf, cellnumbers = TRUE)
poccs.cellDups <- duplicated(poccs.cells[,1])
poccs <- phei_sf
poccs <- poccs[!poccs.cellDups,]
poccs <- st_transform(poccs, crs = st_crs(envs), type = "ellps")
plot(poccs)
cleangabi <- function(x, df){
df <- filter(df, valid_species_name == x)
}
phei <- cleangabi("Pheidole.hyatti", ants)
View(phei)
phei2 <- cleangabi("Pheidole.hyatti", ants)
cleangabi <- function(x, df){
df <- filter(df, valid_species_name == x)
df <- filter(df, dubious != "Dubious")
}
phei2 <- cleangabi("Pheidole.hyatti", ants)
phei2 <- filter(phei, dubious != "Dubious")
phei2 <- cleangabi("Pheidole.hyatti", ants)
cleangabi <- function(x, df){
df <- filter(df, valid_species_name == x)
df <- filter(df, dubious != "Dubious")
print(unique(df$country))
}
phei2 <- cleangabi("Pheidole.hyatti", ants)
cleangabi <- function(x, df, env.rast){
df <- filter(df, valid_species_name == x)
df <- filter(df, dubious != "Dubious")
df <- filter(df, dec_lat != "")
print(unique(df$country))
df_sf <- st_as_sf(df, coords = c("dec_long", "dec_lat"), crs= st_crs(env.rast))
}
phei2 <- cleangabi("Pheidole.hyatti", ants, envs)
View(phei2)
cleangabi <- function(x, df, env.rast){
df <- filter(df, valid_species_name == x)
df <- filter(df, dubious != "Dubious")
df <- filter(df, dec_lat != "")
print(unique(df$country))
df_sf <- st_as_sf(df, coords = c("dec_long", "dec_lat"), crs= st_crs(env.rast))
plot(df_sf)
}
phei2 <- cleangabi("Pheidole.hyatti", ants, envs)
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(envs), type = "ellps")
plot(poccs)
}
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
plot(poccs)
}
occ <- thin_occ(phei2, envs)
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
plot(occs)
}
occ <- thin_occ(phei2, envs)
View(phei2)
phei2 <- cleangabi("Pheidole.hyatti", ants, envs)
#cleans data
cleangabi <- function(x, df, env.rast){
df <- filter(df, valid_species_name == x)
df <- filter(df, dubious != "Dubious")
df <- filter(df, dec_lat != "")
print(unique(df$country))
df_sf <- st_as_sf(df, coords = c("dec_long", "dec_lat"), crs= st_crs(env.rast))
}
phei2 <- cleangabi("Pheidole.hyatti", ants, envs)
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
plot(occs)
}
occ <- thin_occ(phei2, envs)
plot(occ)
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
occ <- thin_occ(phei2, envs)
plot(occ)
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
}
occ <- thin_occ(phei2, envs)
plot(occ)
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
occs <- as.data.frame(st_coordinates(occs))
}
occ <- thin_occ(phei2, envs)
View(occ)
plot(bg)
generate_bg <- function(x, env.rast){
hull <- st_convex_hull(st_union(x))
hull.buf <- sf::st_buffer(hull, dist = 10000)
hull.buf <- st_sf(hull.buf)
envs.bg <- raster::crop(env.rast, hull.buf)
bg <- dismo::randomPoints(env.bg[[1]], n = 10000) %>% as.data.frame()
}
b <- generate_bg(occ, envs)
thin_occ <- function(x, env.rast){
occs.cells <- raster::extract(env.rast[[1]], x, cellnumbers = TRUE)
occs.cellDups <- duplicated(occs.cells[,1])
occs <- x
occs <- occs[!occs.cellDups,]
occs <- st_transform(occs, crs = st_crs(env.rast), type = "ellps")
}
occ <- thin_occ(phei2, envs)
generate_bg <- function(x, env.rast){
hull <- st_convex_hull(st_union(x))
hull.buf <- sf::st_buffer(hull, dist = 10000)
hull.buf <- st_sf(hull.buf)
envs.bg <- raster::crop(env.rast, hull.buf)
bg <- dismo::randomPoints(env.bg[[1]], n = 10000) %>% as.data.frame()
}
plot(bg)
plot(b)
b <- generate_bg(occ, envs)
generate_bg <- function(x, env.rast){
hull <- st_convex_hull(st_union(x))
hull.buf <- sf::st_buffer(hull, dist = 10000)
hull.buf <- st_sf(hull.buf)
envs.bg <- raster::crop(env.rast, hull.buf)
bg <- dismo::randomPoints(envs.bg[[1]], n = 10000) %>% as.data.frame()
}
b <- generate_bg(occ, envs)
plot(b)
occs <- as.data.frame(st_coordinates(occ))
colnames(bg) <- colnames(occs)
e.mx_pheidole <- ENMevaluate(occs, envs = envs, b,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L","LQ","LQH","H"), rm = 1:5))
colnames(b) <- colnames(occs)
e.mx_pheidole <- ENMevaluate(occs, envs = envs, b,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L","LQ","LQH","H"), rm = 1:5))
res <- eval.results(e.mx_pheidole)
opt.aicc_phei <- res %>% filter(delta.AICc == 0)
opt.aicc_phei
pheidole <- eval.predictions(e.mx_pheidole)[[opt.aicc_phei$tune.args]]
plot(pheidole)
xyloni <- cleangabi("Solenopsis.xyloni", ants, envs)
occ <- thin_occ(xyloni, envs)
b <- generate_bg(occ, envs)
plot(b)
occs <- as.data.frame(st_coordinates(occ))
colnames(b) <- colnames(occs)
e.mx_xyloni <- ENMevaluate(occs, envs = envs, b,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L","LQ","LQH","H"), rm = 1:5))
res <- eval.results(e.mx_xyloni)
opt.aicc_xyloni <- res %>% filter(delta.AICc == 0)
opt.aicc_xyloni
xyloni <- eval.predictions(e.mx_xyloni)[[opt.aicc_phei$tune.args]]
plot(xyloni)
sdm_seq <- function(occ, env.rast, bgpoints){
occs <- as.data.frame(st_coordinates(occ))
colnames(bgpoints) <- colnames(occs)
e.mx <- ENMevaluate(occs, env.rast, bgpoints,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L"), rm = 1:5))
res <- eval.results(e.mx)
opt.aicc <- res %>% filter(delta.AICc == 0)
opt.aicc
opt.seq <- res %>%
filter(or.10p.avg == min(or.10p.avg)) %>%
filter(auc.val.avg == max(auc.val.avg))
preds <- eval.predictions(e.mx)[[opt.seq$tune.args]]
}
sdm_seq <- function(occ, env.rast, bgpoints){
occs <- as.data.frame(st_coordinates(occ))
colnames(bgpoints) <- colnames(occs)
e.mx <- ENMevaluate(occs, env.rast, bgpoints,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L"), rm = 1:5))
res <- eval.results(e.mx)
opt.aicc <- res %>% filter(delta.AICc == 0)
opt.aicc
opt.seq <- res %>%
filter(or.10p.avg == min(or.10p.avg)) %>%
filter(auc.val.avg == max(auc.val.avg))
preds <- eval.predictions(e.mx)[[opt.seq$tune.args]]
}
phei2 <- cleangabi("Pheidole.hyatti", ants, envs)
occ <- thin_occ(phei2, envs)
b <- generate_bg(occ, envs)
plot(b)
phei <- sdm_seq(occ, envs, b)
plot(phei)
plot(pheidole)
# run the SDM and extract prediction raster of best model AICc
sdm_seq <- function(occ, env.rast, bgpoints){
occs <- as.data.frame(st_coordinates(occ))
colnames(bgpoints) <- colnames(occs)
e.mx <- ENMevaluate(occs, env.rast, bgpoints,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L"), rm = 1:5))
res <- eval.results(e.mx)
opt.aicc <- res %>% filter(delta.AICc == 0)
print(opt.aicc)
opt.seq <- res %>%
filter(or.10p.avg == min(or.10p.avg)) %>%
filter(auc.val.avg == max(auc.val.avg))
preds <- eval.predictions(e.mx)[[opt.seq$tune.args]]
}
phei <- sdm_seq(occ, envs, b)
# run the SDM and extract prediction raster of best model AICc
sdm_seq <- function(occ, env.rast, bgpoints){
occs <- as.data.frame(st_coordinates(occ))
colnames(bgpoints) <- colnames(occs)
e.mx <- ENMevaluate(occs, env.rast, bgpoints,
algorithm = 'maxnet', partitions = 'block',
tune.args = list(fc = c("L","LQ","LQH","H"), rm = 1:5))
res <- eval.results(e.mx)
opt.aicc <- res %>% filter(delta.AICc == 0)
print(opt.aicc)
opt.seq <- res %>%
filter(or.10p.avg == min(or.10p.avg)) %>%
filter(auc.val.avg == max(auc.val.avg))
print(opt.seq)
preds <- eval.predictions(e.mx)[[opt.seq$tune.args]]
}
phei <- sdm_seq(occ, envs, b)
predraster <- function(x, df, env.rast){
cleanant <- cleangabi(x, df, env.rast)
occ <- thin_occ(cleanant, env.rast)
b <- generate_bg(occ, env.rast)
sdm <- sdm_seq(occ, env.rast, b)
}
plot(phei)
plot(phei_sf, add = TRUE)
xyloni <- predraster("Solenopsis.xyloni", ants, envs)
plot(xyloni)
pheidole <- predraster("Pheidole.hyatti", ants, envs)
plot(pheidole)
overlap <- calc.niche.overlap(pheidole, xyloni, overlapStat = "D")
overlap <- calc.niche.overlap(c(pheidole, xyloni), overlapStat = "D")
two <- raster::stack(pheidole, xyloni)
overlap <- calc.niche.overlap(two, overlapStat = "D")
overlap
